package dat3.cars.service;

import dat3.cars.dto.MemberRequest;
import dat3.cars.dto.MemberResponse;
import dat3.cars.entity.Member;
import dat3.cars.repositories.MemberRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.server.ResponseStatusException;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;


@ExtendWith(MockitoExtension.class)
class MemberServiceMockitoTest {

  @Mock
  MemberRepository memberRepository;

  MemberService memberService;
  Member m1;
  Member m2;
  @BeforeEach
  void setUp() {
    m1 = new Member("m1", "test12", "m1@a.dk", "bb", "Olsen", "xx vej 34", "Lyngby", "2800");
    m2 = new Member("m2", "test12", "m2@a.dk", "aa", "hansen", "xx vej 34", "Lyngby", "2800");
    memberService = new MemberService(memberRepository);
  }


  @Test
  void getMembersAdmin() {
    m1.setCreated(LocalDateTime.now());
    m2.setCreated(LocalDateTime.now());
    Mockito.when(memberRepository.findAll()).thenReturn(List.of(m1, m2));
    List<MemberResponse> members = memberService.getMembers(true);
    assertEquals(2, members.size());
    assertNotNull(members.get(0).getCreated());
  }

  @Test
  void getMembersNotAdmin() {
    m1.setCreated(LocalDateTime.now());
    m2.setCreated(LocalDateTime.now());
    Mockito.when(memberRepository.findAll()).thenReturn(List.of(m1, m2));
    List<MemberResponse> members = memberService.getMembers(false);
    assertEquals(2, members.size());
    assertNull(members.get(0).getCreated());
  }

  @Test
  void findMemberByUsername() {
    m1.setCreated(LocalDateTime.now());
    Mockito.when(memberRepository.findById("m1")).thenReturn(java.util.Optional.of(m1));

    MemberResponse response = memberService.findMemberByUsername("m1",false);
    assertEquals("m1@a.dk", response.getEmail());

  }
  @Test
  void findNonExistingMemberByUsername() {
    Mockito.when(memberRepository.findById("i_dont_exist")).thenReturn(Optional.empty());
    assertThrows(ResponseStatusException.class,() -> memberService.findMemberByUsername("i_dont_exist",false));
  }

  @Test
  void addMember() {
    Member newMember = new Member("newMember", "test12", "m1@a.dk", "bb", "Olsen", "xx vej 34", "Lyngby", "2800");
    //If Id was generated by the server, for example as for car you would need to set the id here
    Mockito.when(memberRepository.save(any(Member.class))).thenReturn(newMember);

    //Quick way to get a MemberRequest (remember eventually values come via a incoming JSON object)
    MemberRequest request = new MemberRequest(newMember);
    MemberResponse response = memberService.addMember(request);
    assertEquals("m1@a.dk", response.getEmail());
  }

  @Test
  void addMemberWithUsernameTaken() {
    Member m1 = new Member("m1", "test12", "m1@a.dk", "bb", "Olsen", "xx vej 34", "Lyngby", "2800");
    //If Id was generated by the server, for example as for car you would need to set the id here
    Mockito.when(memberRepository.existsById("m1")).thenReturn(true);

    MemberRequest request = new MemberRequest(m1);
    assertThrows(ResponseStatusException.class, () -> {
      memberService.addMember(request);
    });
  }
}